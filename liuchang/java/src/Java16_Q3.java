/*
-Q3：抽象工厂模式和原型模式之间的区别？
 */
public class Java16_Q3 {
/*
抽象工厂：举例，饭店卖食物：鸡柳和汉堡；同时饭店还卖饮料：果汁和可乐
我们通常的做法是，首先创建食物抽象产品类，然后创建鸡柳和汉堡的具体产品类（继承食物抽象类）
                再次创建饮料抽象产品类，然后创建果汁和可乐具体的产品类（继承饮料抽象类）
当我们要描述一个只卖鸡柳和可乐的饭店时，我们会创建一个饭店工厂类，然后实例化鸡柳类和可乐类
那么，一般饭店都会有这两个产品，如何才能更好的管理不同的饭店工厂呢？
因此，派生出了抽象的饭店工厂类，该抽象工厂类要求必须要实例化食物类和饮料类
因此，饭店的工厂类都必须要继承该抽象工厂类，抽象工厂的意义在于对于复杂产品组合的情况，能够更好的进行工厂的管理

原型模式：
通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。就是java中的克隆技术，以某个对象为原型，复制出新的对象。显然，新的对象具备原型对象的特点。
克隆类似于new，但是不同于new。new创建新的对象属性采用的是默认值。克隆出的对象的属性值完全和原型对象相同。并且克隆出的新对象改变不会影响原型对象。然后，再修改克隆对象的值。

——单例模式：

　　保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。

——工厂模式：

　　简单工厂模式：用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）

　　工厂方法模式：用来生产同一等级结构中的固定产品。（支持增加任意产品）

　　抽象工厂模式：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）

——建造者模式：

　　分离了对象子组件的单独构造（由Builder来负责）和装配（由Director负责），从而可以构造出复杂的对象。

——原型模式：

　　通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。
 */
}
