/*
-Q5：请解释门面模式及其应用场景，且编写代码Demo说明。
 */
public class Java16_Q5 {
/*
门面模式：
门面模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。门面模式又称为外观模式，它是一种对象结构型模式。

模式动机：
现代的软件系统都非常复杂，尽管我们已经想尽一切方法将其“分而治之”，把一个系统划分为好几个较小的子系统了，
但是仍然可能会存在这样的问题：子系统内有非常多的类，客户端往往需要和许多对象打交道之后 才能完成想要完成的功能。

比如：在我们的生活中医院就是这样的。一般的医院都会分为挂号、门诊、化验、收费、取药等。看病的病人要想治好自己的病（相当于一个客户端想要实现自己的功能）就要和医院的各个部门打交道。
首先，病人需要挂号，然后门诊，如果医生要求化验的话，病人就要去化验，然后再回到门诊室，最后拿药，经过一系列复杂的过程后才能完成看病的过程

解决这种不便的方式就是引入门面模式。如果我们在医院设立一个接待员的话，病人只负责和接待员接触，由接待员负责与医院的各个部门打交道

门面模式一共有两种角色：

门面角色：客户端调用这个角色的方法。此角色知晓相关的子系统的功能和责任。正常情况下，本角色会将所有从客户端发来的请求委派到相应的子系统中去。

子系统角色：可以同时有一个或者多个子系统。每个子系统都不是一个单独的类，而是一个类的集合。每一个子系统都可以被客户端直接调用，或者被门面角色直接调用。子系统并不知道门面的存在，罪域子系统而言，门面仅仅是另一个客户端而已。

优点：

对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入门面模式，客户代码将变得很简单，与之关联的对象也很少。
实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。
降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。
只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。
缺点：

不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。
在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。

使用场景：
1、当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。
2、客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。
3、在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。

 */
//假设去医院看病要：挂号、分诊、看病、开药、缴费
    public static void main(String[] args){
        Hospital h = new Hospital();
        h.go();
    }
}

class Hospital{
    private Guahao h1;
    private Fenzhen h2;
    private Kanbing h3;
    private Kaiyao h4;
    private Jiaofei h5;

    public Hospital(){
        h1 = new Guahao();
        h2 = new Fenzhen();
        h3 = new Kanbing();
        h4 = new Kaiyao();
        h5 = new Jiaofei();
    }
    public void go(){
        h1.go();
        h2.go();
        h3.go();
        h4.go();
        h5.go();
    }
}
class Guahao{
    void go(){
        System.out.println("去挂号");
    }
}
class Fenzhen{
    void go(){
        System.out.println("去分诊");
    }
}
class Kanbing{
    void go(){
        System.out.println("去看病");
    }
}
class Kaiyao{
    void go(){
        System.out.println("去开药");
    }
}
class Jiaofei{
    void go(){
        System.out.println("去缴费");
    }
}

